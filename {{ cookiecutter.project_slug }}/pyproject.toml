[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = """{{ cookiecutter.project_short_description }}"""
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.open_source_license }}"
readme = "README.md"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
classifiers = [
    "Framework :: Django :: 4",
    {% if cookiecutter.open_source_license == 'MIT' -%}
    "License :: OSI Approved :: MIT License",
    {% elif cookiecutter.open_source_license == 'BSD-3-Clause' -%}
    "License :: OSI Approved :: BSD License",
    {% elif cookiecutter.open_source_license == 'ISC' -%}
    "License :: OSI Approved :: ISC License (ISCL)",
    {% elif cookiecutter.open_source_license == 'GPL-3.0-only' -%}
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    {% elif cookiecutter.open_source_license == 'Apache-2.0' -%}
    "License :: OSI Approved :: Apache Software License",
    {% endif %}
    "Framework :: Django",
]
documentation = "https://{{ cookiecutter.github_username}}.github.io/{{ cookiecutter.project_slug }}"

[tool.poetry.dependencies]
python = "^3.9"
Django = "^4.0.2"
{% if cookiecutter.use_rules == "y" -%}
rules = "^3.3.0"
{% endif %}
{% if cookiecutter.use_loguru == "y" -%}
django-easy-logging = {version = "^0.4.0", optional=true}
{% endif %}
{% if cookiecutter.use_restframework == "y" -%}
djangorestframework = "^3.14.0"
django-cors-headers = "^3.13.0"
drf-spectacular = "^0.24.2"
{% endif %}

[tool.poetry.dev-dependencies]
bandit = "^1.7.2"
darglint = "^1.8.0"
Werkzeug = {extras = ["watchdog"], version = "^2.0.2"}
ipdb = "^0.13.9"
psycopg2-binary = "^2.9.3"
watchgod = "^0.8"
mypy = "^0.991"
mypy-extensions = "^0.4.3"
pydocstyle = "^6.1.1"
pylint = "^2.10.2"
pyupgrade = "^3.2.0"
safety = "^2.3.1"
django-stubs = "^1.13.0"
pytest = "^7.2.0"
pytest-sugar = "^0.9.6"
{% if cookiecutter.use_restframework == "y" -%}
djangorestframework-stubs = "^1.7.0"
{% endif %}
flake8 = "^5.0.4"
flake8-isort = "^5.0.0"
coverage = "^6.3.1"
black = {extras = ["d"], version = "^22.1.0"}
pylint-django = "^2.5.0"
pre-commit = "^2.17.0"
django-debug-toolbar = "^3.2.4"
django-extensions = "^3.1.5"
django-coverage-plugin = "^2.0.2"
pytest-django = "^4.5.2"
pytest-cov = "^3.0.0"
{% if cookiecutter.use_loguru == "y" -%}
django-easy-logging = "^0.4.0"
{% endif %}
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.9"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
mkdocs-include-markdown-plugin = "^3.5.1"
colorama = "^0.4.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
# https://github.com/psf/black
target-version = ["py39"]
line-length = 88
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | migrations
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 39
line_length = 88

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.9
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
plugins = ["mypy_django_plugin.main"{% if cookiecutter.use_restframework == "y" -%}, "mypy_drf_plugin.main"{% endif %}]



[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "tests.django_settings"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
testpaths = ["tests", "{{ cookiecutter.package_name }}"]
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__", ".venv"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--cov={{ cookiecutter.package_name }}",
  "--cov-report=term-missing", "--ds=tests.django_settings",
    "--reuse-db",
]

[tool.coverage.run]
source = ["{{ cookiecutter.package_name }}"]
omit = ["*migrations*", "*tests*", "*staticfiles*"]
plugins = ["django_coverage_plugin"]
